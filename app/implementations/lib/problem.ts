const linePatterns = [
    (v: Variable) => `${v} = ${getRandomNum(9) + 1}`,
    (v: Variable) => `${v} = ${getRandomNum(9) + 1} ${getRandomOp()} ${getRandomNum(9) + 1}`,
    (v1: Variable, v2?: Variable) => `${v1} = ${v2 ?? getRandomNum(9) + 1}`,
    (v1: Variable, v2?: Variable, v3?: Variable) => `${v1} = ${v2 ?? getRandomNum(9) + 1} ${getRandomOp()} ${v3 ?? getRandomNum(9) + 1}`,
];


type Variable = 'a' | 'b' | 'c' | 'd';

/* Get random number up to the 'num' parameter */
function getRandomNum(num: number): number {
    return Math.floor(Math.random() * num);
}

/* Pick random one from the options */
function getRandom<T>(options: Array<T>): T {
    return options[getRandomNum(options.length)];
}

/* Get a random operator */
function getRandomOp(): '+' | '-' | '*' | '/' {
    return getRandom(['+', '-', '*', '/']);
}

/* Evaluate Python code */
function evalPy(lines: Array<string>, varsToPrint: Array<Variable>) {
    // It is safe to use eval here, as the 'lines' parameter only contains code generated by 
    // the lambda functions in linePatterns
    lines.forEach(eval);
    return varsToPrint.map(eval);
}

/* Generate a code */
export function generate() {
    const variables: Array<Variable> = getRandom([
        ['a', 'b'],
        ['a', 'b', 'c'],
        ['a', 'b', 'c', 'd']
    ]);
    // Generate lines with random patterns of code
    const lines = variables.map(
        (v, i) => getRandom(linePatterns)(v, ...variables.slice(0, i).toReversed())
    );
    const varsToPrint = evalPy(lines, variables.slice(-2));
    const operatorToPrint = getRandomOp();
    const correctAnswer = eval(`${varsToPrint[0]}${operatorToPrint}${varsToPrint[1]}`);
    return {
        problem: lines.concat([`print(${variables.slice(-2, -1)} ${operatorToPrint} ${variables.slice(-1)})`]).join('\n'),
        answer: correctAnswer,
    };
}